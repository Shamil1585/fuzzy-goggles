#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Функция для поиска достижимых вершин с помощью BFS
vector<bool> findReachable(const vector<vector<int>>& graph, int start) {
    int n = graph.size();
    vector<bool> visited(n, false);
    queue<int> q;

    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int current = q.front();
        q.pop();

        for (int neighbor : graph[current]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }

    return visited;
}

int main() {
    int vertices, edges;
    cout << "Введите количество вершин и ребер графа: ";
    cin >> vertices >> edges;

    // Создаем список смежности для ориентированного графа
    vector<vector<int>> adjacencyList(vertices);

    cout << "Введите направленные ребра (начало конец):" << endl;
    for (int i = 0; i < edges; ++i) {
        int from, to;
        cin >> from >> to;
        adjacencyList[from].push_back(to);
    }

    int startVertex;
    cout << "Введите начальную вершину: ";
    cin >> startVertex;

    // Проверка корректности ввода
    if (startVertex < 0 || startVertex >= vertices) {
        cout << "Ошибка: такой вершины не существует!" << endl;
        return 1;
    }

    // Находим все достижимые вершины
    vector<bool> reachable = findReachable(adjacencyList, startVertex);

    // Выводим недостижимые вершины
    cout << "Недостижимые вершины из " << startVertex << ":" << endl;
    bool found = false;
    for (int i = 0; i < vertices; ++i) {
        if (!reachable[i] && i != startVertex) {
            cout << i << " ";
            found = true;
        }
    }

    if (!found) {
        cout << "Все вершины достижимы из " << startVertex << endl;
    } else {
        cout << endl;
    }

    return 0;
}